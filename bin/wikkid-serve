#! /usr/bin/python3
# -*- coding: utf-8 -*-
#
# Copyright (C) 2010 Wikkid Developers.
#
# This software is licensed under the GNU Affero General Public License
# version 3 (see the file LICENSE).

"""The server class for the wiki."""

try:
    import _wikkid_path
except ImportError:
    # Not running from a branch.
    pass

import logging
import optparse
import sys
from typing import Optional

from wikkid import version
from wikkid.app import WikkidApp
from wikkid.context import (
    DEFAULT_FORMAT,
    DEFAULT_HOST,
    DEFAULT_PORT,
    ExecutionContext,
    )


def setup_logging():
    """Set up a logger sending to stderr."""
    handler = logging.StreamHandler(sys.stderr)
    fmt = '%(asctime)s %(levelname)-7s %(message)s'
    formatter = logging.Formatter(
        fmt=fmt, datefmt="%Y-%m-%d %H:%M:%S")
    handler.setFormatter(formatter)
    root = logging.getLogger()
    root.addHandler(handler)


def detect_format(root: str) -> Optional[str]:
    """Detect the format in use by a path."""
    import os
    if not os.path.isdir(root):
        return None
    while root != os.path.dirname(root):
        if os.path.exists(os.path.join(root, '.bzr')):
            return 'bzr'
        elif os.path.exists(os.path.join(root, '.git')):
            return 'git'
        root = os.path.dirname(root)
    return None


def main(args):

    usage = "Usage: %prog [options] <wiki-branch>"
    parser = optparse.OptionParser(
        usage=usage, description="Run a Wikkid Wiki server.", version=version)
    parser.add_option('--vcs', type='choice', default='auto',
        choices=['auto', 'bzr', 'git'], help=("Default version control system to use."))
    parser.add_option(
        '--host', type='string', default=DEFAULT_HOST,
        help=('The interface to listen on. Defaults to %r' % DEFAULT_HOST))
    parser.add_option(
        '--port', type='int', default=DEFAULT_PORT,
        help=('The port to listen on.  Defaults to %s.' % DEFAULT_PORT))
    parser.add_option(
        '--default-format', type='string', default=DEFAULT_FORMAT,
        help=("Specify the default wiki format to use. Defaults to %r"
              % DEFAULT_FORMAT))
    parser.add_option(
        '--script-name',
        help=('The SCRIPT_NAME for the environment.  This is the prefix for the URLs'))
    options, args = parser.parse_args(sys.argv[1:])

    if len(args) == 0:
        print("No branch location specified.")
        parser.print_usage()
        sys.exit(1)
    if len(args) > 1:
        print("Unexpected positional args: %s" % args[1:])
        parser.print_usage()
        sys.exit(1)
    branch = args[0]
    setup_logging()
    logger = logging.getLogger('wikkid')
    logger.setLevel(logging.INFO)

    logger.info('Using default format: %s (use --default-format to change)', options.default_format)

    execution_context = ExecutionContext(
        host=options.host,
        port=options.port,
        default_format=options.default_format,
        script_name=options.script_name)

    if options.vcs == 'auto':
        # just scroll up until we either find a .bzr or a .git directory
        f = detect_format(branch)
        if f is not None:
            options.vcs = f
            logger.info('Detected vcs: %s (override with --vcs)', options.vcs)
        else:
            options.vcs = 'git'
            logger.info('Defaulting to vcs: %s (override with --vcs)', options.vcs)

    if options.vcs == 'bzr':
        from breezy.workingtree import WorkingTree
        from wikkid.filestore.bzr import FileStore
        from wikkid.user.bzr import LocalBazaarUserMiddleware
        import breezy.bzr
        import breezy.git  # noqa: F401

        working_tree = WorkingTree.open(branch)
        logger.info('Using: %s', working_tree)
        filestore = FileStore(working_tree)

        app = WikkidApp(filestore=filestore, execution_context=execution_context)
        app = LocalBazaarUserMiddleware(app, working_tree.branch)
    elif options.vcs == 'git':
        from wikkid.filestore.git import FileStore
        from wikkid.user.git import LocalGitUserMiddleware
        filestore = FileStore.from_path(branch)

        app = WikkidApp(filestore=filestore, execution_context=execution_context)
        app = LocalGitUserMiddleware(app, filestore.repo)

    from wsgiref.simple_server import make_server
    httpd = make_server(options.host, options.port, app)
    logger.info('Serving on http://%s:%s', options.host, options.port)
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        logger.info('Done.')


if __name__ == "__main__":
    main(sys.argv)
